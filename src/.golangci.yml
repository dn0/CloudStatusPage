#file: noinspection SpellCheckingInspection
run:
  concurrency: 8
  timeout: 3m
  issues-exit-code: 1
  tests: true
  build-tags:
    - prod
  modules-download-mode: readonly
  allow-parallel-runners: false
  go: ""

issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  new: false
  fix: false
  exclude-files:
    - ".*\\.pb\\.go$"
  exclude-rules:
    - path: ".*.go"
      linters:
        - revive
      text: "^(var-naming:)"
  exclude-dirs:
    - scripts

linters:
  # Good option for 'lint on save', pre-commit hook or CI.
  fast: false
  disable-all: true

  enable:
    ## enabled by default
    - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - gosimple # specializes in simplifying a code
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
    - typecheck # like the front-end of a Go compiler, parses and type-checks Go code
    - unused # checks for unused constants, variables, functions and types
    ## disabled by default
    - asasalint # checks for pass []any as any in variadic func(...any)
    - asciicheck # checks that your code does not contain non-ASCII identifiers
    - bidichk # checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - contextcheck # check whether the function uses a non-inherited context
    - copyloopvar # detects places where loop variables are copied
    - cyclop # checks function and package cyclomatic complexity
    - decorder # check declaration order and count of types, constants, variables and functions
    - dupl # tool for code clone detection
    - dupword # checks for duplicate words in the source code
    - durationcheck # checks for two durations multiplied together
    - errchkjson # checks types passed to the json encoding functions
    - errname # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    # - execinquery # query string checker in Query function
    - exhaustive # checks exhaustiveness of enum switch statements
    # - exhaustruct # checks if all structure fields are initialized
    # - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo # forbids identifiers
    - forcetypeassert # finds forced type assertions
    - funlen # tool for detection of long functions
    - gci # controls Go package import order and makes it always deterministic
    - gocheckcompilerdirectives # validates go compiler directive comments (//go:)
    - gochecknoglobals # checks that no global variables exist
    - gochecknoinits # checks that no init functions are present in Go code
    - gochecksumtype # checks exhaustiveness on Go "sum types"
    - gocognit # computes and checks the cognitive complexity of functions
    - goconst # finds repeated strings that could be replaced by a constant
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - gocyclo # computes and checks the cyclomatic complexity of functions
    - godot # checks if comments end in a period
    - err113 # checks errors handling expressions
    - gofmt # whether code was gofmt-ed
    - gofumpt # checks whether code was gofumpt-ed
    - goimports # in addition to fixing imports, goimports also formats your code in the same style as gofmt
    - mnd # analyzer to detect magic numbers
    # - gomoddirectives # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard # allow and block lists linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations
    - goprintffuncname # checks that printf-like functions are named with f at the end
    - gosec # inspects source code for security problems
    - importas # enforces consistent import aliases
    # - intrange # finds places where for loops could make use of an integer range
    - lll # reports long lines
    - loggercheck # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero # finds slice declarations with non-zero initial length
    - mirror # reports wrong mirror patterns of bytes/strings usage
    - misspell # finds commonly misspelled English words
    - musttag # enforces field tags in (un)marshaled structs
    - nakedret # finds naked returns in functions greater than a specified function length
    - nestif # reports deeply nested if statements
    - nilerr # finds the code that returns nil even if it checks that the error is not nil
    - nilnil # checks that there is no simultaneous return of nil error and an invalid value
    - noctx # finds sending http request without context.Context
    - nolintlint # reports ill-formed or insufficient nolint directives
    - nonamedreturns # reports all named returns
    - nosprintfhostport # checks for misuse of Sprintf to construct a host with port in a URL
    - paralleltest # detects missing usage of t.Parallel() method in your Go test
    - perfsprint # checks that fmt.Sprintf can be replaced with a faster alternative
    - prealloc # finds slice declarations that could potentially be pre-allocated
    - predeclared # finds code that shadows one of Go's predeclared identifiers
    - promlinter # checks Prometheus metrics naming via promlint
    - protogetter # reports direct reads from proto message fields when getters should be used
    - reassign # checks that package variables are not reassigned
    - revive # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sloglint # ensure consistent code style when using log/slog
    - spancheck # checks for mistakes with OpenTelemetry/Census spans
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed
    - stylecheck # is a replacement for golint
    - tagalign # check that struct tags are well aligned
    - tagliatelle # checks struct tags
    - tenv # detects using os.Setenv instead of t.Setenv since Go1.17
    - testableexamples # checks if examples are testable (have an expected output)
    # - testifylint # checks usage of github.com/stretchr/testify
    - thelper # detects tests helpers which is not start with t.Helper() method
    - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # removes unnecessary type conversions
    - unparam # reports unused function parameters
    - usestdlibvars # detects the possibility to use variables/constants from the Go standard library
    - varnamelen # checks that the length of a variable's name matches its scope
    - wastedassign # finds wasted assignment statements
    - whitespace # detects leading and trailing whitespace
    - wrapcheck # checks that errors returned from external packages are wrapped

linters-settings:
  cyclop:
    max-complexity: 10 # default: 10
    #package-average: 10.0 # default: 0.0

  exhaustive:
    check:
      - switch
      - map

  funlen:
    lines: 60
    statements: 40
    ignore-comments: false

  gci:
    sections:
      - standard
      - default
      - prefix(cspage/) # should be localmodule but we need to wait: https://github.com/golangci/golangci-lint/pull/4484
    skip-generated: true
    custom-order: true

  gocognit:
    min-complexity: 20 # default: 30

  gocritic:
    disabled-checks:
      - unnamedResult
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    settings:
      hugeParam:
        sizeThreshold: 120

  gofumpt:
    module-path: cspage 
    extra-rules: true

  govet:
    enable-all: true
    disable:
      - fieldalignment # I'm ok to waste some bytes

  inamedparam:
    # skips check for interface methods with only a single parameter.
    skip-single-param: true

  lll:
    line-length: 124

  nakedret:
    # no naked returns
    max-func-lines: 1 # default: 30

  nolintlint:
    require-explanation: true
    require-specific: true

  stylecheck:
    initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]

  tagliatelle:
    case:
      rules:
        json: snake # why it's not a `snake` by default?!
        yaml: snake # why it's not a `snake` by default?!
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  varnamelen:
    ignore-names:
      - err
      - wg
      - ok
      - id
      - tt
      - qs
      - sb
      - ip
    ignore-decls:
      - r *http.Request
      - w http.ResponseWriter
      - c echo.Context
      - t testing.T
      - e error
      - i int
      - T any
